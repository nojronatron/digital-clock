import java.util.Date;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.input.KeyCombination;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.RowConstraints;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.util.Duration;

public class DigitalClock extends Application {
  private static final double STANDARD_LED_WIDTH = 15.65;
  private static final double STANDARD_COLON_WIDTH = 3.0;
  private static final double MIN_START_SCREEN_WIDTH = 300.0;
  private static final double MIN_START_SCREEN_HEIGHT = 100.0;
  private static final double STANDARD_LED_GAP = 6.0;
  private static final double CLOCK_UPDATE_SECONDS = 1.0;
  private static final double DIGITS_ROW_HEIGHT = 80.0;
  private static final String FX_BACKGROUND_COLOR = "-fx-background-color: rgba(10,10,10,0.95)";

  private double lastScreenH = MIN_START_SCREEN_HEIGHT;
  private double lastScreenW = MIN_START_SCREEN_WIDTH;
  private GridPane leftColonChar = new GridPane();
  private GridPane rightColonChar = new GridPane();

  public static void main(String[] args) throws Exception {
    launch(args);
  }

  @Override
  public void start(Stage primaryStage) throws Exception {
    primaryStage.setTitle("LED Clock");
    primaryStage.setMinHeight(MIN_START_SCREEN_HEIGHT);
    primaryStage.setMinWidth(MIN_START_SCREEN_WIDTH);

    // init LedGenerator and get the reusable colon characters
    LedGenerator ledGen = new LedGenerator();
    this.leftColonChar = ledGen.getColonCharacter();
    this.rightColonChar = ledGen.getColonCharacter();

    // create the ledBank GridPane and set its properties
    GridPane ledBank = new GridPane();
    ledBank.setHgap(STANDARD_LED_GAP);
    ledBank.setPrefHeight(this.lastScreenH);
    ledBank.setPrefWidth(this.lastScreenW);

    // init and play the clock update timeline
    Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(CLOCK_UPDATE_SECONDS), event -> {
      updateClock(ledGen, ledBank);
    }));
    timeline.setCycleCount(Timeline.INDEFINITE);
    timeline.play();

    // boilerplate code to set the scene and stage properties
    Scene ledReadoutScene = new Scene(ledBank, primaryStage.getWidth(), primaryStage.getHeight());

    // configure the stage to be on top and show the scene
    primaryStage.setAlwaysOnTop(true);
    primaryStage.setScene(ledReadoutScene);
    primaryStage.initStyle(StageStyle.DECORATED);
    primaryStage.show();

    // set a click event to toggle full screen mode
    ledReadoutScene.setOnMouseClicked(event -> {
      if (primaryStage.isFullScreen()) {
        primaryStage.setFullScreen(false);
        primaryStage.setHeight(this.lastScreenH);
        primaryStage.setWidth(this.lastScreenW);
      } else {
        // NOT full screen
        primaryStage.setFullScreenExitKeyCombination(KeyCombination.keyCombination("X"));
        this.lastScreenH = primaryStage.getHeight();
        this.lastScreenW = primaryStage.getWidth();
        primaryStage.setFullScreen(true);
        primaryStage.setFullScreenExitHint("Click or press X to exit full screen");
      }
    });
  }

  private void updateClock(LedGenerator ledGen, GridPane ledBank) {
    String currTime = getCurrentHHMMSS();

    // process the clocktime into individual digits
    String tensHourStr = currTime.substring(0, 1);
    String onesHourStr = currTime.substring(1, 2);
    String tensMinuteStr = currTime.substring(3, 4);
    String onesMinuteStr = currTime.substring(4, 5);
    String tensSecondStr = currTime.substring(6, 7);
    String onesSecondStr = currTime.substring(7, 8);

    // get digits generated by LedGenerator
    GridPane tensHourDigit = ledGen.getDigitItem(tensHourStr);
    GridPane onesHourDigit = ledGen.getDigitItem(onesHourStr);
    GridPane tensMinuteDigit = ledGen.getDigitItem(tensMinuteStr);
    GridPane onesMinuteDigit = ledGen.getDigitItem(onesMinuteStr);
    GridPane tensSecondDigit = ledGen.getDigitItem(tensSecondStr);
    GridPane onesSecondDigit = ledGen.getDigitItem(onesSecondStr);

    // add column constraints to the GridPane to make the ledBank elastic
    ledBank.getColumnConstraints().clear();
    ColumnConstraints tensHourCol = new ColumnConstraints();
    tensHourCol.setPercentWidth(STANDARD_LED_WIDTH);
    ColumnConstraints onesHourCol = new ColumnConstraints();
    onesHourCol.setPercentWidth(STANDARD_LED_WIDTH);
    ColumnConstraints firstColonCol = new ColumnConstraints();
    firstColonCol.setPercentWidth(STANDARD_COLON_WIDTH);
    ColumnConstraints tensMinuteCol = new ColumnConstraints();
    tensMinuteCol.setPercentWidth(STANDARD_LED_WIDTH);
    ColumnConstraints onesMinuteCol = new ColumnConstraints();
    onesMinuteCol.setPercentWidth(STANDARD_LED_WIDTH);
    ColumnConstraints secondColonCol = new ColumnConstraints();
    secondColonCol.setPercentWidth(STANDARD_COLON_WIDTH);
    ColumnConstraints tensSecondCol = new ColumnConstraints();
    tensSecondCol.setPercentWidth(STANDARD_LED_WIDTH);
    ColumnConstraints onesSecondCol = new ColumnConstraints();
    onesSecondCol.setPercentWidth(STANDARD_LED_WIDTH);
    ledBank.getColumnConstraints().addAll(tensHourCol, onesHourCol, firstColonCol, tensMinuteCol, onesMinuteCol,
        secondColonCol, tensSecondCol, onesSecondCol);

    // add row constraint to manage height of the ledBank
    ledBank.getRowConstraints().clear();
    RowConstraints digitsRow = new RowConstraints();
    digitsRow.setPercentHeight(DIGITS_ROW_HEIGHT);
    ledBank.getRowConstraints().add(digitsRow);

    // set ledBank style
    ledBank.setStyle(FX_BACKGROUND_COLOR);
    ledBank.setGridLinesVisible(true);
    ledBank.setAlignment(Pos.CENTER);

    // clear the ledBank and add the new digits
    ledBank.getChildren().clear();
    ledBank.add(tensHourDigit, 0, 0);
    ledBank.add(onesHourDigit, 1, 0);
    ledBank.add(this.leftColonChar, 2, 0);
    ledBank.add(tensMinuteDigit, 3, 0);
    ledBank.add(onesMinuteDigit, 4, 0);
    ledBank.add(this.rightColonChar, 5, 0);
    ledBank.add(tensSecondDigit, 6, 0);
    ledBank.add(onesSecondDigit, 7, 0);
  }

  private String getCurrentHHMMSS() {
    Date currTime = new Date();
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("HH:mm:ss");
    return sdf.format(currTime);
  }
}
